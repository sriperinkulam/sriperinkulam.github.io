<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>2021-07-28 00:00:00 &#43;0000 UTC on Srikanth Perinkulam</title>
    <link>http://localhost:1313/date/2021-07-28-000000-&#43;0000-utc/index.xml</link>
    <description>Recent content in 2021-07-28 00:00:00 &#43;0000 UTC on Srikanth Perinkulam</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Wed, 28 Jul 2021 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/date/2021-07-28-000000-+0000-utc/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Caddy through the tunnel</title>
      <link>http://localhost:1313/2021/07/28/caddy-through-the-tunnel/</link>
      <pubDate>Wed, 28 Jul 2021 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2021/07/28/caddy-through-the-tunnel/</guid>
      <description>&lt;p&gt;&lt;em&gt;Leave a comment if any of this doesn&amp;rsquo;t make sense. I&amp;rsquo;ll be more than happy to help.&lt;/em&gt;&lt;/p&gt;&#xA;&lt;p&gt;I recently installed &lt;a href=&#34;https://srikanthperinkulam.com/2021/07/28/july-27-2021-2105/&#34;&gt;Navidrome on an Odroid XU4&lt;/a&gt; and configured &lt;a href=&#34;https://srikanthperinkulam.com/2021/07/15/guacamole-clientless-remote-desktop-access/&#34;&gt;Guacamole on my NUC&lt;/a&gt;. To access these applications securely on an external network, I setup a WireGuard tunnel and took this opportunity to learn how to use Caddy as a reverse proxy. Here&amp;rsquo;s a quick walk-through:&lt;/p&gt;&#xA;&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;images/image-2.png&#34; alt=&#34;&#34;  /&gt;&#xA;&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Setup the VPS:&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;Since we need a VPS just to tunnel traffic, get a lightweight one from a reliable provider. After the regular server hardening, setup your first WireGuard peer. I chose to use &lt;a href=&#34;https://github.com/angristan/wireguard-install&#34;&gt;this script&lt;/a&gt; . &lt;/p&gt;&#xA;&lt;p&gt;To route traffic from the external web, configure your DNS settings to point to the VPS and then setup haproxy on the VPS:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;## install haproxy&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo apt install haproxy -y&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;## setup the config&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo nano /etc/haproxy/haproxy.cfg&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Get the proxy config from my &lt;a href=&#34;https://gist.github.com/sriperinkulam/805cd86cd9ed797c8774d2331f135326&#34;&gt;gist here&lt;/a&gt; and make sure you edit the IP address at the end. Once that is done, close out the file and restart the service:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;## check config&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;haproxy -f /etc/haproxy/haproxy.cfg -c&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;## restart&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo systemctl restart haproxy.service&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;With the above steps complete, you should have a WireGuard tunnel that&amp;rsquo;s ready to send traffic over to its peers.&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Setup your peers:&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;Install WireGuard on the device you&amp;rsquo;d like to connect to the external network. Since we&amp;rsquo;ve already setup the first peer [Server], we&amp;rsquo;ll just have to copy over the configs and update it for the other peers [clients]. There are quite a few guides out there that outline this. Happy to provide pointers if required. Once you the peer(s) up and running, make sure they can &amp;rsquo;talk&amp;rsquo; to each other :&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;ping -c 1 xx.xx.xx.xx&lt;/code&gt;&lt;/p&gt;&#xA;&lt;p&gt;Great! Now we have the VPS and the WireGuard peers setup and talking to each other. Now on to routing the traffic. I would generally use Traefik for this. However, I wanted to explore caddy and this was a great test-case. I have docker containers running in DietPi on my Odroid-XU4. I spun up the caddy container using the below compose:&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;version: &amp;#34;3&amp;#34;&#xA;&#xA;networks:&#xA;        web:&#xA;                external: true&#xA;services:&#xA;        caddy:&#xA;                image: caddy:2-alpine&#xA;                restart: unless-stopped&#xA;                ports:&#xA;                        - &amp;#34;80:80&amp;#34;&#xA;                        - &amp;#34;443:443&amp;#34;&#xA;                volumes:&#xA;                        - /home/dietpi/caddy/Caddyfile:/etc/caddy/Caddyfile&#xA;                        - /home/dietpi/caddy/data:/data&#xA;                        - /home/dietpi/caddy/config:/config&#xA;                networks:&#xA;                        - web&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;And the Caddyfile below.&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;{&#xA;    # Global options block. Entirely optional, https is on by default&#xA;    # Optional email key for lets encrypt&#xA;    email updateme@domain.tld &#xA;    # Optional staging lets encrypt for testing. Comment out for production.&#xA;    # acme_ca https://acme-staging-v02.api.letsencrypt.org/directory&#xA;}&#xA;app1.domain.tld {&#xA;    reverse_proxy containername:port&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt; You&amp;rsquo;ll obviously have to tweak them for your needs. With all this set, you should now have functional access to your applications on the home-server externally!&lt;/p&gt;&#xA;&lt;p&gt;It did take me a bit to figure out the moving parts. However, this was a fun exercise to tinker with caddy. Also I&amp;rsquo;ve been using the &lt;a href=&#34;https://pixel.srkn.org/p/sriperinkulam/321094300853211136&#34;&gt;journal feature in Trilium&lt;/a&gt; to keep track of those hopping thoughts as I worked my way through setting this up. Tremendously useful! Questions or have a better way to set this up? I&amp;rsquo;m all ears!&lt;/p&gt;&#xA;</description>
    </item>
  </channel>
</rss>
