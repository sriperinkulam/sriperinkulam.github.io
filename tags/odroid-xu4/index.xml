<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Odroid-Xu4 on Srikanth Perinkulam</title>
    <link>https://srikanthperinkulam.com/tags/odroid-xu4/index.xml</link>
    <description>Recent content in Odroid-Xu4 on Srikanth Perinkulam</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Wed, 28 Jul 2021 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://srikanthperinkulam.com/tags/odroid-xu4/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Caddy through the tunnel</title>
      <link>https://srikanthperinkulam.com/2021/07/28/caddy-through-the-tunnel/</link>
      <pubDate>Wed, 28 Jul 2021 00:00:00 +0000</pubDate>
      <guid>https://srikanthperinkulam.com/2021/07/28/caddy-through-the-tunnel/</guid>
      <description>&lt;p&gt;&lt;em&gt;Leave a comment if any of this doesn&amp;rsquo;t make sense. I&amp;rsquo;ll be more than happy to help.&lt;/em&gt;&lt;/p&gt;&#xA;&lt;p&gt;I recently installed &lt;a href=&#34;https://srikanthperinkulam.com/2021/07/28/july-27-2021-2105/&#34;&gt;Navidrome on an Odroid XU4&lt;/a&gt; and configured &lt;a href=&#34;https://srikanthperinkulam.com/2021/07/15/guacamole-clientless-remote-desktop-access/&#34;&gt;Guacamole on my NUC&lt;/a&gt;. To access these applications securely on an external network, I setup a WireGuard tunnel and took this opportunity to learn how to use Caddy as a reverse proxy. Here&amp;rsquo;s a quick walk-through:&lt;/p&gt;&#xA;&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;images/image-2.png&#34; alt=&#34;&#34;  /&gt;&#xA;&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Setup the VPS:&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;Since we need a VPS just to tunnel traffic, get a lightweight one from a reliable provider. After the regular server hardening, setup your first WireGuard peer. I chose to use &lt;a href=&#34;https://github.com/angristan/wireguard-install&#34;&gt;this script&lt;/a&gt; . &lt;/p&gt;&#xA;&lt;p&gt;To route traffic from the external web, configure your DNS settings to point to the VPS and then setup haproxy on the VPS:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;## install haproxy&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo apt install haproxy -y&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;## setup the config&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo nano /etc/haproxy/haproxy.cfg&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Get the proxy config from my &lt;a href=&#34;https://gist.github.com/sriperinkulam/805cd86cd9ed797c8774d2331f135326&#34;&gt;gist here&lt;/a&gt; and make sure you edit the IP address at the end. Once that is done, close out the file and restart the service:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;## check config&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;haproxy -f /etc/haproxy/haproxy.cfg -c&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;## restart&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo systemctl restart haproxy.service&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;With the above steps complete, you should have a WireGuard tunnel that&amp;rsquo;s ready to send traffic over to its peers.&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Setup your peers:&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;Install WireGuard on the device you&amp;rsquo;d like to connect to the external network. Since we&amp;rsquo;ve already setup the first peer [Server], we&amp;rsquo;ll just have to copy over the configs and update it for the other peers [clients]. There are quite a few guides out there that outline this. Happy to provide pointers if required. Once you the peer(s) up and running, make sure they can &amp;rsquo;talk&amp;rsquo; to each other :&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;ping -c 1 xx.xx.xx.xx&lt;/code&gt;&lt;/p&gt;&#xA;&lt;p&gt;Great! Now we have the VPS and the WireGuard peers setup and talking to each other. Now on to routing the traffic. I would generally use Traefik for this. However, I wanted to explore caddy and this was a great test-case. I have docker containers running in DietPi on my Odroid-XU4. I spun up the caddy container using the below compose:&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;version: &amp;#34;3&amp;#34;&#xA;&#xA;networks:&#xA;        web:&#xA;                external: true&#xA;services:&#xA;        caddy:&#xA;                image: caddy:2-alpine&#xA;                restart: unless-stopped&#xA;                ports:&#xA;                        - &amp;#34;80:80&amp;#34;&#xA;                        - &amp;#34;443:443&amp;#34;&#xA;                volumes:&#xA;                        - /home/dietpi/caddy/Caddyfile:/etc/caddy/Caddyfile&#xA;                        - /home/dietpi/caddy/data:/data&#xA;                        - /home/dietpi/caddy/config:/config&#xA;                networks:&#xA;                        - web&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;And the Caddyfile below.&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;{&#xA;    # Global options block. Entirely optional, https is on by default&#xA;    # Optional email key for lets encrypt&#xA;    email updateme@domain.tld &#xA;    # Optional staging lets encrypt for testing. Comment out for production.&#xA;    # acme_ca https://acme-staging-v02.api.letsencrypt.org/directory&#xA;}&#xA;app1.domain.tld {&#xA;    reverse_proxy containername:port&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt; You&amp;rsquo;ll obviously have to tweak them for your needs. With all this set, you should now have functional access to your applications on the home-server externally!&lt;/p&gt;&#xA;&lt;p&gt;It did take me a bit to figure out the moving parts. However, this was a fun exercise to tinker with caddy. Also I&amp;rsquo;ve been using the &lt;a href=&#34;https://pixel.srkn.org/p/sriperinkulam/321094300853211136&#34;&gt;journal feature in Trilium&lt;/a&gt; to keep track of those hopping thoughts as I worked my way through setting this up. Tremendously useful! Questions or have a better way to set this up? I&amp;rsquo;m all ears!&lt;/p&gt;&#xA;</description>
    </item>
    <item>
      <title>Bringing the cloud home</title>
      <link>https://srikanthperinkulam.com/2019/02/26/bringing-the-cloud-home/</link>
      <pubDate>Tue, 26 Feb 2019 00:00:00 +0000</pubDate>
      <guid>https://srikanthperinkulam.com/2019/02/26/bringing-the-cloud-home/</guid>
      <description>&lt;p&gt;I finally got my Shoebox server setup working! I now have three Single board Computer [SBC] working in tandem behind my home router to accomplish what I&amp;rsquo;ve been wanting to do for quite sometime now - Setting up an easy-to-maintain, in-house server for all my data and web hosting needs. Fixing this all together has been a tremendous learning experience. I still need to weed out some pesky issues but I believe I have the bearing right now.&lt;/p&gt;&#xA;&lt;p&gt;Here&amp;rsquo;s my current setup:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://ownyourbits.com/nextcloudpi/&#34;&gt;NexcloudPi&lt;/a&gt; installed on a &lt;a href=&#34;https://www.raspberrypi.org/products/raspberry-pi-3-model-b-plus/&#34;&gt;Raspberry pi 3B+&lt;/a&gt; board&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://yunohost.org/#/&#34;&gt;Yunohost&lt;/a&gt; installed on an &lt;a href=&#34;https://www.hardkernel.com/shop/odroid-xu4-special-price/&#34;&gt;Odroid XU4&lt;/a&gt; board&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://dietpi.com/&#34;&gt;Diet-Pi&lt;/a&gt; installed on another Raspberry pi 3B+ board&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;I&amp;rsquo;ve been using Nextcloud as my data storage solution for more than a year now. It does what I expect it to do and much more. NextcloudPi handles the intricate details and takes out the hassles that come with hosting data on personal servers.&lt;/p&gt;&#xA;&lt;p&gt;On the ODroid-XU4, I installed debian stretch as the base OS and then manually installed Yunohost as my web server. I use ServerPilot on my Digital ocean servers and was looking for a close match while self hosting. Love YHs web-ui and they did seem to support quite a few web apps. I also have my eyes on &lt;a href=&#34;https://docs.cozy.io/en/tutorials/selfhost-debian/&#34;&gt;cozy&lt;/a&gt; and &lt;a href=&#34;https://caprover.com/&#34;&gt;caprover&lt;/a&gt;. Might explore these at a later point in time if decide to switch to a different SBC.&lt;/p&gt;&#xA;&lt;p&gt;Both NextcloudPi and Yunohost have letsencrypt tools to setup and manage certificates for the domains/sub domains. While super useful, I realised to benefit from that feature, I had to rely on haproxy. With some &lt;a href=&#34;https://help.nextcloud.com/t/accessing-nextcloudpi-behind-haproxy/47489&#34;&gt;pointers from the Nextcloud forum&lt;/a&gt;, I decided to use another pi to front as the main server. Installed Diet-pi on it since it&amp;rsquo;s just something I really liked and configured haproxy on it to map to the corresponding server based on the hostname. While at it, I also added in a switch between the router and various servers.&lt;/p&gt;&#xA;&lt;p&gt;I still need to work on making this more robust. One niggling issue is the speed is heavily compromised. I&amp;rsquo;m guessing it&amp;rsquo;s do with my haproxy config and I should be able to fix it pretty soon. Once I have this sorted out, I need to spend some time hardening the security of the server, further configure Yunohost, device my backup strategies and finally moving my websites over from Digital Ocean.&lt;/p&gt;&#xA;</description>
    </item>
    <item>
      <title>ODroid XU4 SBC</title>
      <link>https://srikanthperinkulam.com/2019/01/03/odroid-xu4-sbc/</link>
      <pubDate>Thu, 03 Jan 2019 00:00:00 +0000</pubDate>
      <guid>https://srikanthperinkulam.com/2019/01/03/odroid-xu4-sbc/</guid>
      <description>&lt;p&gt;Meena and my family gifted me an Odroid XU4 SBC earlier last month as a Christmas/B-day gift. One of my projects during the year-end holidays was to setup a robust home server; Essentially getting my webservers home from Digital Ocean, where they are currently hosted. This would be a terrific companion to the &lt;a href=&#34;https://srikanthperinkulam.com/2017/11/04/fired-up/&#34;&gt;nextcloud fileserver&lt;/a&gt; that I setup earlier using a raspberry pi.&lt;/p&gt;&#xA;&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;images/1546508775615.jpg&#34; alt=&#34;&#34;  /&gt;&#xA;&lt;/p&gt;&#xA;&lt;p&gt;Earlier this week, I chanced upon &lt;a href=&#34;https://dietpi.com/&#34;&gt;DietPi&lt;/a&gt; and decided to launch it on the eMMC chip. One of the first things I did was to install &lt;a href=&#34;https://pi-hole.net/&#34;&gt;Pi-Hole&lt;/a&gt;. With uBlock addons&amp;rsquo; that should be some good riddance to ads across my home network! Would be interesting to keep track of these network pings to see what devices are needlessly calling &amp;lsquo;home&amp;rsquo;.&lt;/p&gt;&#xA;&lt;p&gt;I&amp;rsquo;ve ported my web applications to the Odroid board and am currently testing out the server internally before I &amp;rsquo;turn on&amp;rsquo; the traffic switch. All looks super-promising so far! Over the next few months, I&amp;rsquo;ll have to tweak the settings and tune this mini-beast a bit for performance. For now though, I&amp;rsquo;m more than happy with what it&amp;rsquo;s delivering!&lt;/p&gt;&#xA;</description>
    </item>
  </channel>
</rss>
